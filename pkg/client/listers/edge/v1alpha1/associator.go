//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
)

// AssociatorClusterLister can list Associators across all workspaces, or scope down to a AssociatorLister for one workspace.
// All objects returned here must be treated as read-only.
type AssociatorClusterLister interface {
	// List lists all Associators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error)
	// Cluster returns a lister that can list and get Associators in one workspace.
	Cluster(clusterName logicalcluster.Name) AssociatorLister
	AssociatorClusterListerExpansion
}

type associatorClusterLister struct {
	indexer cache.Indexer
}

// NewAssociatorClusterLister returns a new AssociatorClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewAssociatorClusterLister(indexer cache.Indexer) *associatorClusterLister {
	return &associatorClusterLister{indexer: indexer}
}

// List lists all Associators in the indexer across all workspaces.
func (s *associatorClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.Associator))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Associators.
func (s *associatorClusterLister) Cluster(clusterName logicalcluster.Name) AssociatorLister {
	return &associatorLister{indexer: s.indexer, clusterName: clusterName}
}

// AssociatorLister can list Associators across all namespaces, or scope down to a AssociatorNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type AssociatorLister interface {
	// List lists all Associators in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error)
	// Associators returns a lister that can list and get Associators in one workspace and namespace.
	Associators(namespace string) AssociatorNamespaceLister
	AssociatorListerExpansion
}

// associatorLister can list all Associators inside a workspace or scope down to a AssociatorLister for one namespace.
type associatorLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Associators in the indexer for a workspace.
func (s *associatorLister) List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Associator))
	})
	return ret, err
}

// Associators returns an object that can list and get Associators in one namespace.
func (s *associatorLister) Associators(namespace string) AssociatorNamespaceLister {
	return &associatorNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// associatorNamespaceLister helps list and get Associators.
// All objects returned here must be treated as read-only.
type AssociatorNamespaceLister interface {
	// List lists all Associators in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error)
	// Get retrieves the Associator from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.Associator, error)
	AssociatorNamespaceListerExpansion
}

// associatorNamespaceLister helps list and get Associators.
// All objects returned here must be treated as read-only.
type associatorNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all Associators in the indexer for a given workspace and namespace.
func (s *associatorNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Associator))
	})
	return ret, err
}

// Get retrieves the Associator from the indexer for a given workspace, namespace and name.
func (s *associatorNamespaceLister) Get(name string) (*edgev1alpha1.Associator, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Associator"), name)
	}
	return obj.(*edgev1alpha1.Associator), nil
}

// NewAssociatorLister returns a new AssociatorLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewAssociatorLister(indexer cache.Indexer) *associatorScopedLister {
	return &associatorScopedLister{indexer: indexer}
}

// associatorScopedLister can list all Associators inside a workspace or scope down to a AssociatorLister for one namespace.
type associatorScopedLister struct {
	indexer cache.Indexer
}

// List lists all Associators in the indexer for a workspace.
func (s *associatorScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Associator))
	})
	return ret, err
}

// Associators returns an object that can list and get Associators in one namespace.
func (s *associatorScopedLister) Associators(namespace string) AssociatorNamespaceLister {
	return &associatorScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// associatorScopedNamespaceLister helps list and get Associators.
type associatorScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Associators in the indexer for a given workspace and namespace.
func (s *associatorScopedNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Associator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Associator))
	})
	return ret, err
}

// Get retrieves the Associator from the indexer for a given workspace, namespace and name.
func (s *associatorScopedNamespaceLister) Get(name string) (*edgev1alpha1.Associator, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Associator"), name)
	}
	return obj.(*edgev1alpha1.Associator), nil
}
