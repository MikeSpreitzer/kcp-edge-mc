//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v2alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev2alpha1 "github.com/kubestellar/kubestellar/pkg/apis/edge/v2alpha1"
)

// DownsyncWorkloadPartSliceClusterLister can list DownsyncWorkloadPartSlices across all workspaces, or scope down to a DownsyncWorkloadPartSliceLister for one workspace.
// All objects returned here must be treated as read-only.
type DownsyncWorkloadPartSliceClusterLister interface {
	// List lists all DownsyncWorkloadPartSlices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev2alpha1.DownsyncWorkloadPartSlice, err error)
	// Cluster returns a lister that can list and get DownsyncWorkloadPartSlices in one workspace.
	Cluster(clusterName logicalcluster.Name) DownsyncWorkloadPartSliceLister
	DownsyncWorkloadPartSliceClusterListerExpansion
}

type downsyncWorkloadPartSliceClusterLister struct {
	indexer cache.Indexer
}

// NewDownsyncWorkloadPartSliceClusterLister returns a new DownsyncWorkloadPartSliceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewDownsyncWorkloadPartSliceClusterLister(indexer cache.Indexer) *downsyncWorkloadPartSliceClusterLister {
	return &downsyncWorkloadPartSliceClusterLister{indexer: indexer}
}

// List lists all DownsyncWorkloadPartSlices in the indexer across all workspaces.
func (s *downsyncWorkloadPartSliceClusterLister) List(selector labels.Selector) (ret []*edgev2alpha1.DownsyncWorkloadPartSlice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev2alpha1.DownsyncWorkloadPartSlice))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get DownsyncWorkloadPartSlices.
func (s *downsyncWorkloadPartSliceClusterLister) Cluster(clusterName logicalcluster.Name) DownsyncWorkloadPartSliceLister {
	return &downsyncWorkloadPartSliceLister{indexer: s.indexer, clusterName: clusterName}
}

// DownsyncWorkloadPartSliceLister can list all DownsyncWorkloadPartSlices, or get one in particular.
// All objects returned here must be treated as read-only.
type DownsyncWorkloadPartSliceLister interface {
	// List lists all DownsyncWorkloadPartSlices in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev2alpha1.DownsyncWorkloadPartSlice, err error)
	// Get retrieves the DownsyncWorkloadPartSlice from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev2alpha1.DownsyncWorkloadPartSlice, error)
	DownsyncWorkloadPartSliceListerExpansion
}

// downsyncWorkloadPartSliceLister can list all DownsyncWorkloadPartSlices inside a workspace.
type downsyncWorkloadPartSliceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all DownsyncWorkloadPartSlices in the indexer for a workspace.
func (s *downsyncWorkloadPartSliceLister) List(selector labels.Selector) (ret []*edgev2alpha1.DownsyncWorkloadPartSlice, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev2alpha1.DownsyncWorkloadPartSlice))
	})
	return ret, err
}

// Get retrieves the DownsyncWorkloadPartSlice from the indexer for a given workspace and name.
func (s *downsyncWorkloadPartSliceLister) Get(name string) (*edgev2alpha1.DownsyncWorkloadPartSlice, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev2alpha1.Resource("DownsyncWorkloadPartSlice"), name)
	}
	return obj.(*edgev2alpha1.DownsyncWorkloadPartSlice), nil
}

// NewDownsyncWorkloadPartSliceLister returns a new DownsyncWorkloadPartSliceLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewDownsyncWorkloadPartSliceLister(indexer cache.Indexer) *downsyncWorkloadPartSliceScopedLister {
	return &downsyncWorkloadPartSliceScopedLister{indexer: indexer}
}

// downsyncWorkloadPartSliceScopedLister can list all DownsyncWorkloadPartSlices inside a workspace.
type downsyncWorkloadPartSliceScopedLister struct {
	indexer cache.Indexer
}

// List lists all DownsyncWorkloadPartSlices in the indexer for a workspace.
func (s *downsyncWorkloadPartSliceScopedLister) List(selector labels.Selector) (ret []*edgev2alpha1.DownsyncWorkloadPartSlice, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev2alpha1.DownsyncWorkloadPartSlice))
	})
	return ret, err
}

// Get retrieves the DownsyncWorkloadPartSlice from the indexer for a given workspace and name.
func (s *downsyncWorkloadPartSliceScopedLister) Get(name string) (*edgev2alpha1.DownsyncWorkloadPartSlice, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev2alpha1.Resource("DownsyncWorkloadPartSlice"), name)
	}
	return obj.(*edgev2alpha1.DownsyncWorkloadPartSlice), nil
}
