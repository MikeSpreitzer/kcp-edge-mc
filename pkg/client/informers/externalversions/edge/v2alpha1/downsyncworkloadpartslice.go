//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v2alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev2alpha1 "github.com/kubestellar/kubestellar/pkg/apis/edge/v2alpha1"
	scopedclientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned"
	clientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned/cluster"
	"github.com/kubestellar/kubestellar/pkg/client/informers/externalversions/internalinterfaces"
	edgev2alpha1listers "github.com/kubestellar/kubestellar/pkg/client/listers/edge/v2alpha1"
)

// DownsyncWorkloadPartSliceClusterInformer provides access to a shared informer and lister for
// DownsyncWorkloadPartSlices.
type DownsyncWorkloadPartSliceClusterInformer interface {
	Cluster(logicalcluster.Name) DownsyncWorkloadPartSliceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev2alpha1listers.DownsyncWorkloadPartSliceClusterLister
}

type downsyncWorkloadPartSliceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewDownsyncWorkloadPartSliceClusterInformer constructs a new informer for DownsyncWorkloadPartSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDownsyncWorkloadPartSliceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredDownsyncWorkloadPartSliceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredDownsyncWorkloadPartSliceClusterInformer constructs a new informer for DownsyncWorkloadPartSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDownsyncWorkloadPartSliceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().DownsyncWorkloadPartSlices().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().DownsyncWorkloadPartSlices().Watch(context.TODO(), options)
			},
		},
		&edgev2alpha1.DownsyncWorkloadPartSlice{},
		resyncPeriod,
		indexers,
	)
}

func (f *downsyncWorkloadPartSliceClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredDownsyncWorkloadPartSliceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *downsyncWorkloadPartSliceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev2alpha1.DownsyncWorkloadPartSlice{}, f.defaultInformer)
}

func (f *downsyncWorkloadPartSliceClusterInformer) Lister() edgev2alpha1listers.DownsyncWorkloadPartSliceClusterLister {
	return edgev2alpha1listers.NewDownsyncWorkloadPartSliceClusterLister(f.Informer().GetIndexer())
}

// DownsyncWorkloadPartSliceInformer provides access to a shared informer and lister for
// DownsyncWorkloadPartSlices.
type DownsyncWorkloadPartSliceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev2alpha1listers.DownsyncWorkloadPartSliceLister
}

func (f *downsyncWorkloadPartSliceClusterInformer) Cluster(clusterName logicalcluster.Name) DownsyncWorkloadPartSliceInformer {
	return &downsyncWorkloadPartSliceInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type downsyncWorkloadPartSliceInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev2alpha1listers.DownsyncWorkloadPartSliceLister
}

func (f *downsyncWorkloadPartSliceInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *downsyncWorkloadPartSliceInformer) Lister() edgev2alpha1listers.DownsyncWorkloadPartSliceLister {
	return f.lister
}

type downsyncWorkloadPartSliceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *downsyncWorkloadPartSliceScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev2alpha1.DownsyncWorkloadPartSlice{}, f.defaultInformer)
}

func (f *downsyncWorkloadPartSliceScopedInformer) Lister() edgev2alpha1listers.DownsyncWorkloadPartSliceLister {
	return edgev2alpha1listers.NewDownsyncWorkloadPartSliceLister(f.Informer().GetIndexer())
}

// NewDownsyncWorkloadPartSliceInformer constructs a new informer for DownsyncWorkloadPartSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDownsyncWorkloadPartSliceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredDownsyncWorkloadPartSliceInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredDownsyncWorkloadPartSliceInformer constructs a new informer for DownsyncWorkloadPartSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDownsyncWorkloadPartSliceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().DownsyncWorkloadPartSlices().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().DownsyncWorkloadPartSlices().Watch(context.TODO(), options)
			},
		},
		&edgev2alpha1.DownsyncWorkloadPartSlice{},
		resyncPeriod,
		indexers,
	)
}

func (f *downsyncWorkloadPartSliceScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredDownsyncWorkloadPartSliceInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
