name: test multi-cluster distribution

on:
  workflow_call:
  # So we can trigger manually if needed
  workflow_dispatch:
  # To confirm any changes to docs build successfully, without deploying them
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  test-multicluster:
    name: Test multicluster distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      
      - uses: actions/setup-go@v5
        with:
          go-version: v1.19
          cache: true

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        id: install

      - uses: ko-build/setup-ko@v0.6
      
      - name: Install dependencies
        run: |
          curl -L https://raw.githubusercontent.com/open-cluster-management-io/clusteradm/main/install.sh | bash
          wget https://github.com/kubestellar/kubeflex/releases/download/v0.4.1/kubeflex_0.4.1_linux_amd64.tar.gz
          tar -xvf kubeflex_0.4.1_linux_amd64.tar.gz bin/kflex
          mv bin/kflex /usr/local/bin
          rm -fr bin kubeflex_0.4.1_linux_amd64.tar.gz 

      - name: Run test
        run: |
          cd test/e2e/multi-cluster-deployment 
          KFLEX_DISABLE_CHATTY=true ./run-test.sh 

      - name: kubeconfig contexts
        if: always()
        run: kubectl config get-contexts

      - name: pods
        if: always()
        run: kubectl --context kind-kubeflex get pods -A

      - name: kubestellar controller manager log
        if: always()
        run: kubectl --context kind-kubeflex logs -n wds1-system $(kubectl --context kind-kubeflex get pod -n wds1-system --selector=control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')

      - name: placements
        if: always()
        run: kubectl --context wds1 get placements -o yaml

      - name: deployments
        if: always()
        run: kubectl --context wds1 get deployments -A -o yaml

      - name: placementdecisions
        if: always()
        run: kubectl --context wds1 get placementdecisions -o yaml

      - name: manifestworks
        if: always()
        run: kubectl --context imbs1 get manifestworks -A -o yaml

      - name: workstatuses
        if: always()
        run: kubectl --context imbs1 get workstatuses -A -o yaml
